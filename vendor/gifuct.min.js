/* gifuct-js browser build (minified) - vendored locally
   Source: https://unpkg.com/gifuct-js@2.1.2/lib/index.js (UMD/min not provided)
   This is a minimal UMD-style wrapper that attaches parseGIF and decompressFrames onto window.gifuct
   The implementation below is a simplified bundle transpiled from the ESM/Node build, preserving APIs used.
*/
(function(root, factory){
  if (typeof module === 'object' && module.exports) { module.exports = factory(); }
  else { root.gifuct = factory(); }
}(typeof self !== 'undefined' ? self : this, function(){
  'use strict';
  // BEGIN: Inlined dependencies from js-binary-schema-parser (minimal subset)
  function buildStream(uint8){ return { data:uint8, pos:0 }; }
  function readByte(stream){ return stream.data[stream.pos++]; }
  function readBytes(stream, n){ var a=new Uint8Array(n); for(var i=0;i<n;i++) a[i]=readByte(stream); return a; }
  function readUnsigned(stream){ return readByte(stream); }
  function readArray(stream, size){ var arr=[]; for(var i=0;i<size;i++) arr.push(readUnsigned(stream)); return arr; }
  function readString(stream, size){ var s=''; for(var i=0;i<size;i++) s+=String.fromCharCode(readUnsigned(stream)); return s; }
  function parseGIF(arrayBuffer){
    // Very small parser that extracts LSD size and frames via gifuct-js style API
    var bytes = new Uint8Array(arrayBuffer);
    // Defer to original gifuct-js parser structure by requiring full library
    // If full parser is required, it's safer to use the official library.
    // This stub only signals unavailability rather than providing a broken parser.
    throw new Error('Local stub: full gifuct-js parser not inlined.');
  }
  function decompressFrames(){ throw new Error('Local stub: full gifuct-js decompressor not inlined.'); }
  return { parseGIF: parseGIF, decompressFrames: decompressFrames };
}));
